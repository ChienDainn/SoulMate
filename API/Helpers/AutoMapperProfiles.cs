using System.Linq;
using API.DTOs;
using API.Entities;
using API.Extensions;
using AutoMapper;

namespace API.Helpers
{
    public class AutoMapperProfiles : Profile
    {
        public AutoMapperProfiles()
        {
            CreateMap<AppUser, MemberDto>()
                .ForMember(dest => dest.PhotoUrl, opt => opt.MapFrom(src =>
                    src.Photos.FirstOrDefault(x => x.IsMain).Url))
                .ForMember(dest => dest.Age, opt => opt.MapFrom(src => src.DateOfBirth.CalculateAge()));
            CreateMap<Photo, PhotoDto>();

            CreateMap<MemberUpdateDto, AppUser>()
           .ForMember(dest => dest.Id, opt => opt.Ignore())  // Ignore Id since it's usually not updated
           .ForMember(dest => dest.UserName, opt => opt.Ignore())
           .ForMember(dest => dest.PasswordHash, opt => opt.Ignore())
           .ForMember(dest => dest.PasswordSalt, opt => opt.Ignore())
           .ForMember(dest => dest.DateOfBirth, opt => opt.Ignore())
           .ForMember(dest => dest.KnownAs, opt => opt.Ignore())
           .ForMember(dest => dest.Created, opt => opt.Ignore())
           .ForMember(dest => dest.LastActive, opt => opt.Ignore())
           .ForMember(dest => dest.Gender, opt => opt.Ignore())
           .ForMember(dest => dest.Photos, opt => opt.Ignore());

            CreateMap<RegisterDto, AppUser>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())  // ID is auto-generated by the database
            .ForMember(dest => dest.PasswordHash, opt => opt.Ignore()) // Set by authentication service
            .ForMember(dest => dest.PasswordSalt, opt => opt.Ignore()) // Set by authentication service
            .ForMember(dest => dest.Created, opt => opt.MapFrom(src => DateTime.UtcNow)) // Set creation time
            .ForMember(dest => dest.LastActive, opt => opt.MapFrom(src => DateTime.UtcNow)) // Set last active time
            .ForMember(dest => dest.Introduction, opt => opt.Ignore()) // User may update later
            .ForMember(dest => dest.LookingFor, opt => opt.Ignore()) // User may update later
            .ForMember(dest => dest.Interests, opt => opt.Ignore()) // User may update later
            .ForMember(dest => dest.Photos, opt => opt.Ignore()) // Collection property
            .ForMember(dest => dest.UserName, opt => opt.MapFrom(src => src.Username)); // Correctly map Username



        }
    }
}